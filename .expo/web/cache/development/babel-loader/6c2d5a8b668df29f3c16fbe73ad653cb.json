{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\n\n\n\n\n\n\n\n\n\n\nvar _renative = require(\"renative\");\nvar _chat = _interopRequireDefault(require(\"../platformAssets/runtime/chat.styles\"));\nvar _firebase = _interopRequireDefault(require(\"../projectConfig/firebase\"));\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\nvar _BackButtonMac = _interopRequireDefault(require(\"./BackButtonMac\"));\nvar _colors = _interopRequireDefault(require(\"../platformAssets/runtime/colors\"));var _jsxFileName = \"/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/src/ChatScreen.js\";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}\n\n\nconsole.disableYellowBox = true;var _Dimensions$get =\n\n_reactNative.Dimensions.get('window'),height = _Dimensions$get.height;\n\nvar chatRoom = _firebase.default.database().ref().child('chatrooms').child('global');var\n\nChat = function (_Component) {(0, _inherits2.default)(Chat, _Component);var _super = _createSuper(Chat);function Chat() {var _this;(0, _classCallCheck2.default)(this, Chat);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.\n    state = {\n      isUserLaggedIn: false,\n      nickname: '',\n      email: '',\n      msg: '',\n      messages: {},\n      initialUserLogin: false };_this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    getNewMessages = function (snap) {\n\n      if (snap.val()) {\n        _this.setState({ messages: snap.val() });\n      }\n    };_this.\n\n\n    handleNickname = function (text) {\n      _this.setState({ nickname: text });\n    };_this.\n\n\n    handleEmail = function (text) {\n      _this.setState({ email: text });\n    };_this.\n\n\n    handleMessage = function (text) {\n      _this.setState({ msg: text });\n    };_this.\n\n\n    handleLogin = function () {var _this$state =\n      _this.state,nickname = _this$state.nickname,email = _this$state.email;\n      if (nickname && email) {\n        _this.setState({\n          isUserLaggedIn: true,\n          initialUserLogin: true });\n\n      }\n      setTimeout(function () {_this.setState({ initialUserLogin: false });}, 1000);\n    };_this.\n\n\n    handleKeyPress = function (e) {var _this$state2 =\n\n\n      _this.state,msg = _this$state2.msg,nickname = _this$state2.nickname,email = _this$state2.email;\n      if (msg.trim() !== '' && e.key === 'Enter') {\n\n        chatRoom.push({\n          nickname: nickname,\n          email: email,\n          msg: msg });\n\n\n        _this.setState({ msg: '' });\n      }\n    };_this.\n\n\n    handleButtonPress = function () {var _this$state3 =\n\n\n      _this.state,msg = _this$state3.msg,nickname = _this$state3.nickname,email = _this$state3.email;\n      if (msg.trim() !== '') {\n\n        chatRoom.push({\n          nickname: nickname,\n          email: email,\n          msg: msg });\n\n\n        _this.setState({ msg: '' });\n      }\n    };_this.\n\n\n    textInputActiveStyle = function (element) {\n      element.setNativeProps({\n        style: {\n          backgroundColor: _colors.default.activeColorSecondary,\n          shadowColor: 'rgba(0,0,0, .4)',\n          shadowOffset: { height: 1, width: 1 },\n          shadowOpacity: 1,\n          shadowRadius: 1,\n          outline: 'none' } });\n\n\n    };_this.\n\n\n    textInputInactiveStyle = function (element) {\n      var shadowOpacity = _renative.isWeb ? 'none' : 0;\n      element.setNativeProps({\n        style: {\n          backgroundColor: _colors.default.backgroundColor,\n          shadowOpacity: shadowOpacity } });\n\n\n    };_this.\n\n\n    buttonActiveStyle = function (element) {\n      element.setNativeProps({\n        style: {\n          backgroundColor: _colors.default.activeColorTertiary,\n          outline: 'none' } });\n\n\n    };_this.\n\n\n    buttonInactiveStyle = function (element) {\n      element.setNativeProps({\n        style: {\n          backgroundColor: _colors.default.activeBackgroundColor } });\n\n\n    };_this.\n\n\n    keyBoardListener = function () {var\n      isUserLaggedIn = _this.state.isUserLaggedIn;\n      if (isUserLaggedIn) {_this.scrollView.scrollToEnd({ animated: false });}\n    };_this.\n\n\n    handleMobileScroll = function () {var\n      initialUserLogin = _this.state.initialUserLogin;\n      if (!_renative.isWeb && initialUserLogin) {\n        _this.scrollView.scrollToEnd({ animated: false });\n      } else if (!_renative.isWeb) {\n        _this.scrollView.scrollToEnd({ animated: true });\n      }\n    };return _this;}(0, _createClass2.default)(Chat, [{ key: \"componentDidMount\", value: function componentDidMount() {chatRoom.on('value', this.getNewMessages);this.keyboardDidShowListener = _reactNative.Keyboard.addListener('keyboardDidShow', this.keyBoardListener);} }, { key: \"componentDidUpdate\", value: function componentDidUpdate(prevProps, prevState) {var _this$state4 = this.state,isUserLaggedIn = _this$state4.isUserLaggedIn,messages = _this$state4.messages,initialUserLogin = _this$state4.initialUserLogin;if (isUserLaggedIn && _renative.isWeb) {this.messageInput.focus();}if (_renative.isWeb && messages !== prevState.messages && isUserLaggedIn) {this.scrollView.scrollToEnd({ animated: true });}if (_renative.isWeb && initialUserLogin) {this.scrollView.scrollToEnd({ animated: false });}} }, { key: \"componentWillUnmount\", value: function componentWillUnmount() {this.keyboardDidShowListener.remove();chatRoom.off('value', this.getNewMessages);} }, { key: \"render\", value: function render()\n\n\n    {var _this2 = this;var _this$state5 =\n\n\n      this.state,msg = _this$state5.msg,messages = _this$state5.messages,isUserLaggedIn = _this$state5.isUserLaggedIn,nickname = _this$state5.nickname;var\n      navigation = this.props.navigation;\n      if (!isUserLaggedIn) {\n        return (\n          _react.default.createElement(_reactNative.KeyboardAvoidingView, { behavior: _renative.isAndroid ? 'padding' : null, style: _chat.default.loginContainer, __source: { fileName: _jsxFileName, lineNumber: 199, columnNumber: 17 } },\n          _react.default.createElement(_BackButtonMac.default, { navigation: navigation, __source: { fileName: _jsxFileName, lineNumber: 200, columnNumber: 21 } }),\n          _react.default.createElement(_reactNative.TextInput, {\n            ref: function ref(component) {return _this2.nicknameInput = component;},\n            onFocus: function onFocus() {return _this2.textInputActiveStyle(_this2.nicknameInput);},\n            onBlur: function onBlur() {return _this2.textInputInactiveStyle(_this2.nicknameInput);},\n            style: _chat.default.loginInput,\n            underlineColorAndroid: \"transparent\",\n            placeholder: \"Nickname\",\n            placeholderTextColor: _colors.default.activeColorPrimary,\n            selectionColor: _colors.default.activeColorPrimary,\n            autoCapitalize: \"none\",\n            onChangeText: this.handleNickname, __source: { fileName: _jsxFileName, lineNumber: 201, columnNumber: 21 } }),\n\n\n          _react.default.createElement(_reactNative.TextInput, {\n            ref: function ref(component) {return _this2.emailInput = component;},\n            onFocus: function onFocus() {return _this2.textInputActiveStyle(_this2.emailInput);},\n            onBlur: function onBlur() {return _this2.textInputInactiveStyle(_this2.emailInput);},\n            style: _chat.default.loginInput,\n            underlineColorAndroid: \"transparent\",\n            placeholder: \"Email\",\n            placeholderTextColor: _colors.default.activeColorPrimary,\n            selectionColor: _colors.default.activeColorPrimary,\n            autoCapitalize: \"none\",\n            onChangeText: this.handleEmail, __source: { fileName: _jsxFileName, lineNumber: 214, columnNumber: 21 } }),\n\n\n          _react.default.createElement(_reactNative.TouchableOpacity, {\n            ref: function ref(component) {return _this2.button = component;},\n            onFocus: function onFocus() {return _this2.buttonActiveStyle(_this2.button);},\n            onBlur: function onBlur() {return _this2.buttonInactiveStyle(_this2.button);},\n            style: _chat.default.loginButton,\n            onPress: function onPress() {return _this2.handleLogin();}, __source: { fileName: _jsxFileName, lineNumber: 227, columnNumber: 21 } },\n\n          _react.default.createElement(_reactNative.Text, { style: _chat.default.buttonText, __source: { fileName: _jsxFileName, lineNumber: 234, columnNumber: 25 } }, \"Sign In\"))));\n\n\n\n\n\n      }\n\n      return (\n        _react.default.createElement(_reactNative.SafeAreaView, { style: _chat.default.chatContainer, __source: { fileName: _jsxFileName, lineNumber: 243, columnNumber: 13 } },\n        !messages ?\n        _react.default.createElement(_ActivityIndicator.default, { __source: { fileName: _jsxFileName, lineNumber: 245, columnNumber: 21 } }) :\n\n        _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n          style: { flex: 1 },\n          keyboardVerticalOffset: height / 10,\n          behavior: _renative.isAndroid ? 'padding' : null, __source: { fileName: _jsxFileName, lineNumber: 247, columnNumber: 21 } },\n\n        _react.default.createElement(_BackButtonMac.default, { navigation: navigation, __source: { fileName: _jsxFileName, lineNumber: 252, columnNumber: 25 } }),\n        _react.default.createElement(_reactNative.View, { style: _chat.default.chatContainer, __source: { fileName: _jsxFileName, lineNumber: 253, columnNumber: 25 } },\n        _react.default.createElement(_reactNative.ScrollView, {\n          ref: function ref(view) {_this2.scrollView = view;},\n          style: _chat.default.chatMessagesContainer,\n          onContentSizeChange: function onContentSizeChange() {return (\n              _this2.handleMobileScroll());}, __source: { fileName: _jsxFileName, lineNumber: 254, columnNumber: 29 } },\n\n\n        Object.keys(messages).map(function (message) {return (\n            _react.default.createElement(_reactNative.View, { key: message, __source: { fileName: _jsxFileName, lineNumber: 262, columnNumber: 37 } },\n            nickname === messages[message].nickname ?\n            _react.default.createElement(_reactNative.View, { style: _chat.default.userMessageContainer, __source: { fileName: _jsxFileName, lineNumber: 264, columnNumber: 45 } },\n            _react.default.createElement(_reactNative.Text, { style: _chat.default.userNicknameText, __source: { fileName: _jsxFileName, lineNumber: 265, columnNumber: 49 } },\n            messages[message].nickname),\n\n            _react.default.createElement(_reactNative.View, { style: _chat.default.userMessage, __source: { fileName: _jsxFileName, lineNumber: 268, columnNumber: 49 } },\n            _react.default.createElement(_reactNative.Text, { style: _chat.default.userText, __source: { fileName: _jsxFileName, lineNumber: 269, columnNumber: 53 } },\n            messages[message].msg))) :\n\n\n\n\n            _react.default.createElement(_reactNative.View, { style: _chat.default.messageContainer, __source: { fileName: _jsxFileName, lineNumber: 275, columnNumber: 45 } },\n            _react.default.createElement(_reactNative.Text, { style: _chat.default.nicknameText, __source: { fileName: _jsxFileName, lineNumber: 276, columnNumber: 49 } },\n            messages[message].nickname),\n\n            _react.default.createElement(_reactNative.View, { style: _chat.default.message, __source: { fileName: _jsxFileName, lineNumber: 279, columnNumber: 49 } },\n            _react.default.createElement(_reactNative.Text, { style: _chat.default.text, __source: { fileName: _jsxFileName, lineNumber: 280, columnNumber: 53 } },\n            messages[message].msg)))));})),\n\n\n\n\n\n\n\n\n        _react.default.createElement(_reactNative.View, { style: _chat.default.inputContainer, __source: { fileName: _jsxFileName, lineNumber: 290, columnNumber: 29 } },\n        _react.default.createElement(_reactNative.TextInput, {\n          ref: function ref(component) {return _this2.messageInput = component;},\n          onFocus: function onFocus() {return _this2.textInputActiveStyle(_this2.messageInput);},\n          onBlur: function onBlur() {return _this2.textInputInactiveStyle(_this2.messageInput);},\n          value: msg,\n          style: _chat.default.chatInput,\n          selectionColor: _colors.default.activeColorPrimary,\n          placeholder: \"Type a message ...\",\n          placeholderTextColor: _colors.default.activeColorPrimary,\n          outline: \"none\",\n          onChangeText: this.handleMessage,\n          onKeyPress: this.handleKeyPress,\n          maxLength: 6018, __source: { fileName: _jsxFileName, lineNumber: 291, columnNumber: 33 } }),\n\n        _react.default.createElement(_renative.Icon, {\n          iconFont: \"ionicons\",\n          iconName: \"md-send\",\n          iconColor: _colors.default.activeColorPrimary,\n          style: { width: 35, height: 35, alignSelf: 'center' },\n          onPress: function onPress() {return _this2.handleButtonPress();}, __source: { fileName: _jsxFileName, lineNumber: 305, columnNumber: 33 } }))))));\n\n\n\n\n\n\n\n\n    } }]);return Chat;}(_react.Component);exports.default = Chat;","map":{"version":3,"sources":["/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/src/ChatScreen.js"],"names":["console","disableYellowBox","Dimensions","get","height","chatRoom","firebase","database","ref","child","Chat","state","isUserLaggedIn","nickname","email","msg","messages","initialUserLogin","getNewMessages","snap","val","setState","handleNickname","text","handleEmail","handleMessage","handleLogin","setTimeout","handleKeyPress","e","trim","key","push","handleButtonPress","textInputActiveStyle","element","setNativeProps","style","backgroundColor","colors","activeColorSecondary","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","outline","textInputInactiveStyle","isWeb","buttonActiveStyle","activeColorTertiary","buttonInactiveStyle","activeBackgroundColor","keyBoardListener","scrollView","scrollToEnd","animated","handleMobileScroll","on","keyboardDidShowListener","Keyboard","addListener","prevProps","prevState","messageInput","focus","remove","off","navigation","props","isAndroid","styles","loginContainer","component","nicknameInput","loginInput","activeColorPrimary","emailInput","button","loginButton","buttonText","chatContainer","flex","view","chatMessagesContainer","Object","keys","map","message","userMessageContainer","userNicknameText","userMessage","userText","messageContainer","nicknameText","inputContainer","chatInput","alignSelf","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    View,\n    Text,\n    TextInput,\n    ScrollView,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Dimensions,\n    Keyboard,\n    SafeAreaView,\n} from 'react-native';\nimport { Icon } from 'renative';\nimport styles from '../platformAssets/runtime/chat.styles';\nimport firebase from '../projectConfig/firebase';\nimport Activity from './ActivityIndicator';\nimport BackButtonMac from './BackButtonMac';\nimport colors from '../platformAssets/runtime/colors';\nimport {isWeb, isAndroid, isIos, isMacos} from 'renative';\n\nconsole.disableYellowBox = true;\n\nconst { height } = Dimensions.get('window');\n\nconst chatRoom = firebase.database().ref().child('chatrooms').child('global');\n\nexport default class Chat extends Component {\n    state = {\n        isUserLaggedIn: false,\n        nickname: '',\n        email: '',\n        msg: '',\n        messages: {},\n        initialUserLogin: false\n    };\n\n    componentDidMount() {\n        chatRoom.on('value', this.getNewMessages);\n        this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyBoardListener);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { isUserLaggedIn, messages, initialUserLogin } = this.state;\n        if (isUserLaggedIn && isWeb) { this.messageInput.focus(); }\n\n        // Scroll handle on new message arrival for Web\n        if (isWeb && messages !== prevState.messages && isUserLaggedIn) {\n            this.scrollView.scrollToEnd({ animated: true });\n        }\n\n        // Scroll handle on log in for Web\n        if (isWeb && initialUserLogin) {\n            this.scrollView.scrollToEnd({ animated: false });\n        }\n    }\n\n    componentWillUnmount() {\n        this.keyboardDidShowListener.remove();\n        chatRoom.off('value', this.getNewMessages);\n    }\n\n    // Get new messages\n    getNewMessages = (snap) => {\n        // Update state if not null\n        if (snap.val()) {\n            this.setState({ messages: snap.val() });\n        }\n    };\n\n    // Add nickname to state\n    handleNickname = (text) => {\n        this.setState({ nickname: text });\n    }\n\n    // Add email to state\n    handleEmail = (text) => {\n        this.setState({ email: text });\n    }\n\n    // Add message to state\n    handleMessage = (text) => {\n        this.setState({ msg: text });\n    }\n\n    // Login\n    handleLogin = () => {\n        const { nickname, email } = this.state;\n        if (nickname && email) {\n            this.setState({\n                isUserLaggedIn: true,\n                initialUserLogin: true\n            });\n        }\n        setTimeout(() => { this.setState({ initialUserLogin: false }); }, 1000);\n    };\n\n    // Push messsage on 'Enter' press\n    handleKeyPress = (e) => {\n        const {\n            msg, nickname, email,\n        } = this.state;\n        if (msg.trim() !== '' && e.key === 'Enter') {\n            // Send the message from chat input field\n            chatRoom.push({\n                nickname,\n                email,\n                msg,\n            });\n            // Clear chat message input field\n            this.setState({ msg: '' });\n        }\n    };\n\n    // Push messsage on press\n    handleButtonPress = () => {\n        const {\n            msg, nickname, email,\n        } = this.state;\n        if (msg.trim() !== '') {\n            // Send the message from chat input field\n            chatRoom.push({\n                nickname,\n                email,\n                msg,\n            });\n            // Clear chat message input field\n            this.setState({ msg: '' });\n        }\n    }\n\n    // Set text input active style\n    textInputActiveStyle = (element) => {\n        element.setNativeProps({\n            style: {\n                backgroundColor: colors.activeColorSecondary,\n                shadowColor: 'rgba(0,0,0, .4)',\n                shadowOffset: { height: 1, width: 1 },\n                shadowOpacity: 1,\n                shadowRadius: 1,\n                outline: 'none',\n            },\n        });\n    }\n\n    // Set text input inactive style\n    textInputInactiveStyle = (element) => {\n        const shadowOpacity = isWeb ? 'none' : 0;\n        element.setNativeProps({\n            style: {\n                backgroundColor: colors.backgroundColor,\n                shadowOpacity,\n            },\n        });\n    }\n\n    // Set button active style\n    buttonActiveStyle = (element) => {\n        element.setNativeProps({\n            style: {\n                backgroundColor: colors.activeColorTertiary,\n                outline: 'none',\n            },\n        });\n    }\n\n    // Set button inactive style\n    buttonInactiveStyle = (element) => {\n        element.setNativeProps({\n            style: {\n                backgroundColor: colors.activeBackgroundColor,\n            },\n        });\n    }\n\n    // Keyboard listener\n    keyBoardListener = () => {\n        const { isUserLaggedIn } = this.state;\n        if (isUserLaggedIn) { this.scrollView.scrollToEnd({ animated: false }); }\n    }\n\n    // Scroll handle for mobile\n    handleMobileScroll = () => {\n        const { initialUserLogin } = this.state;\n        if (!isWeb && initialUserLogin) {\n            this.scrollView.scrollToEnd({ animated: false });\n        } else if (!isWeb) {\n            this.scrollView.scrollToEnd({ animated: true });\n        }\n    }\n\n\n    render() {\n        const {\n            msg, messages, isUserLaggedIn, nickname\n        } = this.state;\n        const { navigation } = this.props;\n        if (!isUserLaggedIn) {\n            return (\n                <KeyboardAvoidingView behavior={isAndroid ? 'padding' : null} style={styles.loginContainer}>\n                    <BackButtonMac navigation={navigation} />\n                    <TextInput\n                        ref={component => this.nicknameInput = component}\n                        onFocus={() => this.textInputActiveStyle(this.nicknameInput)}\n                        onBlur={() => this.textInputInactiveStyle(this.nicknameInput)}\n                        style={styles.loginInput}\n                        underlineColorAndroid=\"transparent\"\n                        placeholder=\"Nickname\"\n                        placeholderTextColor={colors.activeColorPrimary}\n                        selectionColor={colors.activeColorPrimary}\n                        autoCapitalize=\"none\"\n                        onChangeText={this.handleNickname}\n                    />\n\n                    <TextInput\n                        ref={component => this.emailInput = component}\n                        onFocus={() => this.textInputActiveStyle(this.emailInput)}\n                        onBlur={() => this.textInputInactiveStyle(this.emailInput)}\n                        style={styles.loginInput}\n                        underlineColorAndroid=\"transparent\"\n                        placeholder=\"Email\"\n                        placeholderTextColor={colors.activeColorPrimary}\n                        selectionColor={colors.activeColorPrimary}\n                        autoCapitalize=\"none\"\n                        onChangeText={this.handleEmail}\n                    />\n\n                    <TouchableOpacity\n                        ref={component => this.button = component}\n                        onFocus={() => this.buttonActiveStyle(this.button)}\n                        onBlur={() => this.buttonInactiveStyle(this.button)}\n                        style={styles.loginButton}\n                        onPress={() => this.handleLogin()}\n                    >\n                        <Text style={styles.buttonText}>\n                            Sign In\n                        </Text>\n                    </TouchableOpacity>\n                </KeyboardAvoidingView>\n            );\n        }\n\n        return (\n            <SafeAreaView style={styles.chatContainer}>\n                {!messages ? (\n                    <Activity />\n                ) : (\n                    <KeyboardAvoidingView\n                        style={{ flex: 1 }}\n                        keyboardVerticalOffset={height / 10}\n                        behavior={isAndroid ? 'padding' : null}\n                    >\n                        <BackButtonMac navigation={navigation} />\n                        <View style={styles.chatContainer}>\n                            <ScrollView\n                                ref={(view) => { this.scrollView = view; }}\n                                style={styles.chatMessagesContainer}\n                                onContentSizeChange={() => (\n                                    this.handleMobileScroll()\n                                )}\n                            >\n                                {Object.keys(messages).map(message => (\n                                    <View key={message}>\n                                        {nickname === messages[message].nickname ? (\n                                            <View style={styles.userMessageContainer}>\n                                                <Text style={styles.userNicknameText}>\n                                                    {messages[message].nickname}\n                                                </Text>\n                                                <View style={styles.userMessage}>\n                                                    <Text style={styles.userText}>\n                                                        {messages[message].msg}\n                                                    </Text>\n                                                </View>\n                                            </View>\n                                        ) : (\n                                            <View style={styles.messageContainer}>\n                                                <Text style={styles.nicknameText}>\n                                                    {messages[message].nickname}\n                                                </Text>\n                                                <View style={styles.message}>\n                                                    <Text style={styles.text}>\n                                                        {messages[message].msg}\n                                                    </Text>\n                                                </View>\n                                            </View>\n                                        )}\n                                    </View>\n                                ))}\n                            </ScrollView>\n\n                            <View style={styles.inputContainer}>\n                                <TextInput\n                                    ref={component => this.messageInput = component}\n                                    onFocus={() => this.textInputActiveStyle(this.messageInput)}\n                                    onBlur={() => this.textInputInactiveStyle(this.messageInput)}\n                                    value={msg}\n                                    style={styles.chatInput}\n                                    selectionColor={colors.activeColorPrimary}\n                                    placeholder=\"Type a message ...\"\n                                    placeholderTextColor={colors.activeColorPrimary}\n                                    outline=\"none\"\n                                    onChangeText={this.handleMessage}\n                                    onKeyPress={this.handleKeyPress}\n                                    maxLength={6018}\n                                />\n                                <Icon\n                                    iconFont=\"ionicons\"\n                                    iconName=\"md-send\"\n                                    iconColor={colors.activeColorPrimary}\n                                    style={{ width: 35, height: 35, alignSelf: 'center' }}\n                                    onPress={() => this.handleButtonPress()}\n                                />\n                            </View>\n                        </View>\n                    </KeyboardAvoidingView>\n\n                )}\n            </SafeAreaView>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"script"}