{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = createToolbarAndroidComponent;var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactNative = require(\"./react-native\");var _jsxFileName = \"/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/node_modules/react-native-vector-icons/lib/toolbar-android.js\";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}\n\nvar ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nvar LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);\nvar NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);\nvar OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);\nvar ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);\n\nvar arePropsEqual = function arePropsEqual(keys) {return function (prevProps, nextProps) {return (\n      (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys)));};};\n\nvar areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nvar areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nvar areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nvar areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nfunction createToolbarAndroidComponent(\nIconNamePropType,\ngetImageSource)\n{var _class, _temp;\n  return _temp = _class = function (_PureComponent) {(0, _inherits2.default)(IconToolbarAndroid, _PureComponent);var _super = _createSuper(IconToolbarAndroid);function IconToolbarAndroid() {var _this;(0, _classCallCheck2.default)(this, IconToolbarAndroid);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      state = {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined };return _this;}(0, _createClass2.default)(IconToolbarAndroid, [{ key: \"componentDidMount\", value: function componentDidMount()\n\n\n      {\n        this.updateLogoIconSource();\n        this.updateNavIconSource();\n        this.updateOverflowIconSource();\n        this.updateActionIconSources();\n      } }, { key: \"componentDidUpdate\", value: function componentDidUpdate(\n\n      prevProps) {\n        if (!areLogoIconPropsEqual(prevProps, this.props)) {\n          this.updateLogoIconSource();\n        }\n        if (!areNavIconPropsEqual(prevProps, this.props)) {\n          this.updateNavIconSource();\n        }\n        if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n          this.updateOverflowIconSource();\n        }\n        if (!areActionPropsEqual(prevProps, this.props)) {\n          this.updateActionIconSources();\n        }\n      } }, { key: \"updateLogoIconSource\", value: function updateLogoIconSource() {var _this$props, logoName, iconSize, iconColor, titleColor, logo;return _regenerator.default.async(function updateLogoIconSource$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_this$props =\n\n\n                this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;if (!\n                logoName) {_context.next = 8;break;}_context.next = 4;return _regenerator.default.awrap(\n                getImageSource(\n                logoName,\n                iconSize,\n                iconColor || titleColor));case 4:logo = _context.sent;\n\n                this.setState({ logo: logo });_context.next = 9;break;case 8:\n\n                if (this.state.logo) {\n                  this.setState({ logo: undefined });\n                }case 9:case \"end\":return _context.stop();}}}, null, this, null, Promise);} }, { key: \"updateNavIconSource\", value: function updateNavIconSource() {var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;return _regenerator.default.async(function updateNavIconSource$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_this$props2 =\n\n\n\n                this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;if (!\n                navIconName) {_context2.next = 8;break;}_context2.next = 4;return _regenerator.default.awrap(\n                getImageSource(\n                navIconName,\n                iconSize,\n                iconColor || titleColor));case 4:navIcon = _context2.sent;\n\n                this.setState({ navIcon: navIcon });_context2.next = 9;break;case 8:\n\n                if (this.state.navIcon) {\n                  this.setState({ navIcon: undefined });\n                }case 9:case \"end\":return _context2.stop();}}}, null, this, null, Promise);} }, { key: \"updateOverflowIconSource\", value: function updateOverflowIconSource() {var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;return _regenerator.default.async(function updateOverflowIconSource$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_this$props3 =\n\n\n\n                this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;if (!\n                overflowIconName) {_context3.next = 8;break;}_context3.next = 4;return _regenerator.default.awrap(\n                getImageSource(\n                overflowIconName,\n                iconSize,\n                iconColor || titleColor));case 4:overflowIcon = _context3.sent;\n\n                this.setState({ overflowIcon: overflowIcon });_context3.next = 9;break;case 8:\n\n                if (this.state.overflowIcon) {\n                  this.setState({ overflowIcon: undefined });\n                }case 9:case \"end\":return _context3.stop();}}}, null, this, null, Promise);} }, { key: \"updateActionIconSources\", value: function updateActionIconSources() {var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;return _regenerator.default.async(function updateActionIconSources$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_this$props4 =\n\n\n\n                this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;_context4.next = 3;return _regenerator.default.awrap(\n                Promise.all(\n                (actions || []).map(function (action) {\n                  if (action.iconName) {\n                    return getImageSource(\n                    action.iconName,\n                    action.iconSize || iconSize,\n                    action.iconColor || iconColor || titleColor).\n                    then(function (icon) {return _objectSpread(_objectSpread({}, action), {}, { icon: icon });});\n                  }\n                  return Promise.resolve(action);\n                })));case 3:updatedActions = _context4.sent;\n\n                this.setState({ actions: updatedActions });case 5:case \"end\":return _context4.stop();}}}, null, this, null, Promise);} }, { key: \"render\", value: function render()\n\n\n      {\n        return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state, { __source: { fileName: _jsxFileName, lineNumber: 142, columnNumber: 14 } }));\n      } }]);return IconToolbarAndroid;}(_react.PureComponent), _class.propTypes = { logoName: IconNamePropType, navIconName: IconNamePropType, overflowIconName: IconNamePropType, actions: _propTypes.default.arrayOf(_propTypes.default.shape({ title: _propTypes.default.string.isRequired, iconName: IconNamePropType, iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']), showWithText: _propTypes.default.bool })), iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]) }, _class.defaultProps = { iconSize: 24 }, _temp;\n\n}","map":{"version":3,"sources":["/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","PureComponent","logoName","navIconName","overflowIconName","actions","PropTypes","title","iconName","iconSize","iconColor","show","showWithText","titleColor","logo","navIcon","overflowIcon","getImageSource","updatedActions","Promise","action","icon"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}