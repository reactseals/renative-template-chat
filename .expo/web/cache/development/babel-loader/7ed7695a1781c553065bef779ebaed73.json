{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = createIconSet;exports.DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_SIZE = exports.NativeIconAPI = void 0;var _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactNative = require(\"./react-native\");\n\n\n\n\n\n\n\nvar _ensureNativeModuleAvailable = _interopRequireDefault(require(\"./ensure-native-module-available\"));\nvar _iconButton = _interopRequireDefault(require(\"./icon-button\"));\nvar _tabBarItemIos = _interopRequireDefault(require(\"./tab-bar-item-ios\"));\nvar _toolbarAndroid = _interopRequireDefault(require(\"./toolbar-android\"));var _jsxFileName = \"/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/node_modules/react-native-vector-icons/lib/create-icon-set.js\";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}\n\nvar NativeIconAPI =\n_reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;exports.NativeIconAPI = NativeIconAPI;\n\nvar DEFAULT_ICON_SIZE = 12;exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;\nvar DEFAULT_ICON_COLOR = 'black';exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;\n\nfunction createIconSet(\nglyphMap,\nfontFamily,\nfontFile,\nfontStyle)\n{\n\n  var fontBasename = fontFile ?\n  fontFile.replace(/\\.(otf|ttf)$/, '') :\n  fontFamily;\n\n  var fontReference = _reactNative.Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily });\n\n\n  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));var\n\n  Icon = function (_PureComponent) {(0, _inherits2.default)(Icon, _PureComponent);var _super = _createSuper(Icon);function Icon() {var _this;(0, _classCallCheck2.default)(this, Icon);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      root = null;_this.\n\n\n\n\n\n\n\n      handleRef = function (ref) {\n        _this.root = ref;\n      };return _this;}(0, _createClass2.default)(Icon, [{ key: \"setNativeProps\", value: function setNativeProps(nativeProps) {if (this.root) {this.root.setNativeProps(nativeProps);}} }, { key: \"render\", value: function render()\n\n      {var _this$props =\n        this.props,name = _this$props.name,size = _this$props.size,color = _this$props.color,style = _this$props.style,children = _this$props.children,props = (0, _objectWithoutProperties2.default)(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color };\n\n\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal' };\n\n\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n\n        return (\n          _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, props, { __source: { fileName: _jsxFileName, lineNumber: 92, columnNumber: 9 } }),\n          glyph,\n          children));\n\n\n      } }]);return Icon;}(_react.PureComponent);Icon.propTypes = { allowFontScaling: _propTypes.default.bool, name: IconNamePropType, size: _propTypes.default.number, color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), children: _propTypes.default.node, style: _propTypes.default.any };Icon.defaultProps = { size: DEFAULT_ICON_SIZE, allowFontScaling: false };\n\n\n  var imageSourceCache = {};\n\n  function getImageSource(\n  name)\n\n\n  {var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    (0, _ensureNativeModuleAvailable.default)();\n\n    var glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n    var scale = _reactNative.PixelRatio.get();\n\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale: scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor,\n        function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n          if (!error && image) {\n            resolve({ uri: image, scale: scale });\n          } else {\n            reject(error);\n          }\n        });\n\n      }\n    });\n  }\n\n  function loadFont() {var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n    if (_reactNative.Platform.OS === 'ios') {\n      (0, _ensureNativeModuleAvailable.default)();\n      if (!file) {\n        return Promise.reject(\n        new Error('Unable to load font, because no file was specified. '));\n\n      }\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = (0, _iconButton.default)(Icon);\n  Icon.TabBarItem = (0, _tabBarItemIos.default)(\n  IconNamePropType,\n  getImageSource);\n\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = (0, _toolbarAndroid.default)(\n  IconNamePropType,\n  getImageSource);\n\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}","map":{"version":3,"sources":["/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","fontBasename","fontFile","fontReference","Platform","windows","android","web","default","IconNamePropType","PropTypes","Object","Icon","PureComponent","allowFontScaling","name","size","color","children","style","props","glyph","glyphMap","String","styleDefaults","fontSize","styleOverrides","fontFamily","fontWeight","fontStyle","imageSourceCache","processedColor","cacheKey","scale","PixelRatio","cached","reject","resolve","uri","error","image","file","Promise"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"script"}