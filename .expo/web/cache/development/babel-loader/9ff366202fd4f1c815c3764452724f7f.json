{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = setAndForwardRef;\n\n\n\n\n\n\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n  setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref);\n\n    if (typeof forwardedRef === 'function') {\n\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n\n      forwardedRef.current = ref;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/makenzis/Desktop/renative-template-chat-refactor/renative-template-chat/node_modules/react-native-web/dist/modules/setAndForwardRef/index.js"],"names":["setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current"],"mappings":";;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4Be,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,eAAe,GAAGD,IAAI,CAACC,eAA3B;AACIC,EAAAA,WAAW,GAAGF,IAAI,CAACE,WADvB;AAEA,SAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAC9B,QAAIC,YAAY,GAAGJ,eAAe,EAAlC;AACAC,IAAAA,WAAW,CAACE,GAAD,CAAX;;AAEA,QAAI,OAAOC,YAAP,KAAwB,UAA5B,EAAwC;;AAEtCA,MAAAA,YAAY,CAACD,GAAD,CAAZ;AACD,KAHD,MAGO,IAAI,OAAOC,YAAP,KAAwB,QAAxB,IAAoCA,YAAY,IAAI,IAAxD,EAA8D;;AAEnEA,MAAAA,YAAY,CAACC,OAAb,GAAuBF,GAAvB;AACD;AACF,GAXD;AAYD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\n\n/**\n * This is a helper function for when a component needs to be able to forward a ref\n * to a child component, but still needs to have access to that component as part of\n * its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n *   function MyView(props) {\n *     const ref = useRef(null);\n *\n *     function setRef = setAndForwardRef({\n *       getForwardedRef: () => props.forwardedRef,\n *       setLocalRef: localRef => {\n *         ref.current = localRef;\n *       },\n *     });\n *\n *     return <View ref={setRef} />;\n *   }\n *\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\n *     <MyView {...props} forwardedRef={ref} />\n *   ));\n */\nexport default function setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n      setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref); // Forward to user ref prop (if one has been specified)\n\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}